# -*- coding: utf-8 -*-
"""Untitled22.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16c0bskb_oHi3LxWTmRX9_njLKxa5Zkt3
"""

import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# --- 1. PAGE CONFIGURATION ---
st.set_page_config(
    page_title="CKD Healthcare Dashboard",
    page_icon="ðŸ©º",
    layout="wide"
)

# --- 2. DATA LOADING AND CACHING ---
@st.cache_data
def load_data():
    """
    Loads and preprocesses the cleaned CKD dataset.
    """
    try:
        df = pd.read_csv("cleaned_kidney_disease.csv")
    except FileNotFoundError:
        st.error("Error: 'cleaned_kidney_disease.csv' not found.")
        st.info("Please ensure 'cleaned_kidney_disease.csv' is in the same directory as this script.")
        return None

    df['class'] = df['class'].map({'Chronic Kidney Disease': 1, 'Not Chronic Kidney Disease': 0})
    bins = [0, 30, 50, 70, df['age'].max() + 1]
    labels = ['<30', '30-50', '50-70', '70+']
    df['age_group'] = pd.cut(df['age'], bins=bins, labels=labels, right=False)
    
    return df

# Load the data
df = load_data()

# --- 3. MAIN DASHBOARD ---
if df is not None:
    st.title("ðŸ©º Chronic Kidney Disease (CKD) Analytics Dashboard")
    
    # --- 4. KPIs & HIGH-LEVEL METRICS ---
    st.subheader("Overall Snapshot")
    total_patients = len(df)
    ckd_patients = df['class'].sum()
    prevalence = (ckd_patients / total_patients) * 100

    col1, col2, col3 = st.columns(3)
    col1.metric("Total Patients", f"{total_patients}")
    col2.metric("CKD Cases", f"{ckd_patients}")
    col3.metric("Overall Prevalence", f"{prevalence:.1f}%")

    # --- 5. HORIZONTAL LAYOUT FOR CORE VISUALIZATIONS ---
    st.subheader("Key Healthcare Metrics at a Glance")
    colA, colB, colC = st.columns(3)

    # --- Prevalence by Age Group ---
    with colA:
        age_prev = df.groupby('age_group')['class'].mean().mul(100)
        # --- ADJUSTED FIGSIZE & FONTSIZE ---
        fig, ax = plt.subplots(figsize=(4.5, 3.5)) 
        bars = sns.barplot(x=age_prev.index, y=age_prev.values, palette='Blues_d', ax=ax)
        ax.set_title('Prevalence by Age', fontsize=12)
        ax.set_ylabel('Prevalence (%)', fontsize=9)
        ax.set_xlabel('Age Group', fontsize=9)
        ax.set_ylim(0, 100)
        for bar in bars.patches:
            ax.text(bar.get_x() + bar.get_width() / 2, bar.get_height(), f'{bar.get_height():.1f}%', 
                    ha='center', va='bottom', fontsize=8, fontweight='bold')
        plt.tight_layout()
        st.pyplot(fig, use_container_width=True)

    # --- Odds Ratios of Key Risk Factors ---
    with colB:
        categorical_vars = ['hypertension', 'diabetes_mellitus', 'coronary_artery_disease', 'anemia']
        or_list = []
        for var in categorical_vars:
            cont_table = pd.crosstab(df[var], df['class']) + 0.5
            a, b, c, d = cont_table.loc[1, 1], cont_table.loc[1, 0], cont_table.loc[0, 1], cont_table.loc[0, 0]
            odds_ratio = (a * d) / (b * c)
            or_list.append({'Risk Factor': var.replace('_', ' ').title(), 'Odds Ratio': odds_ratio})
        
        odds_df = pd.DataFrame(or_list).set_index('Risk Factor').sort_values(by='Odds Ratio')
        # --- ADJUSTED FIGSIZE & FONTSIZE ---
        fig, ax = plt.subplots(figsize=(4.5, 3.5))
        sns.barplot(x=odds_df['Odds Ratio'], y=odds_df.index, palette='OrRd', ax=ax)
        ax.set_title('Comorbidity Risks', fontsize=12)
        ax.set_xlabel("Odds Ratio (Log Scale)", fontsize=9)
        ax.set_ylabel("")
        ax.axvline(1, color='black', linestyle='--')
        ax.set_xscale('log')
        plt.tight_layout()
        st.pyplot(fig, use_container_width=True)

    # --- Incidence of Abnormal Lab Findings ---
    with colC:
        abnormal_defs = {
            'Albumin > 0': df['albumin'] > 0,
            'Pus Cells Abn.': df['pus_cell'] == 0,
            'RBCs Abn.': df['red_blood_cells'] == 0,
            'Sugar > 0': df['sugar'] > 0
        }
        incidence_data = []
        for lab, cond in abnormal_defs.items():
            incidence_data.append([cond[df['class']==0].mean()*100, cond[df['class']==1].mean()*100])
        
        incidence_df = pd.DataFrame(incidence_data, index=abnormal_defs.keys(), columns=['Non-CKD', 'CKD'])
        # --- ADJUSTED FIGSIZE & FONTSIZE ---
        fig, ax = plt.subplots(figsize=(4.5, 3.5))
        sns.heatmap(incidence_df, annot=True, fmt=".1f", cmap='coolwarm', linewidths=0.5, ax=ax, cbar=False, annot_kws={"size": 9})
        ax.set_title('Abnormal Findings Incidence', fontsize=12)
        ax.set_ylabel("")
        plt.tight_layout()
        st.pyplot(fig, use_container_width=True)

    # --- 6. TABS FOR DEEPER, INTERACTIVE ANALYSIS ---
    st.subheader("Drill-Down and Advanced Analysis")
    tab1, tab2, tab3 = st.tabs(["Interactive Clinical Explorer", "Correlation Analysis", "Data Explorer"])

    with tab1:
        col_select, col_plot = st.columns([1, 2])
        with col_select:
            lab_options = { "Serum Creatinine": "serum_creatinine", "Hemoglobin": "hemoglobin", "Blood Glucose": "blood_glucose_random",
                            "Blood Urea": "blood_urea", "Sodium": "sodium", "Potassium": "potassium" }
            selected_lab1 = st.selectbox("Lab Value 1:", list(lab_options.keys()), index=0)
            selected_lab2 = st.selectbox("Lab Value 2:", list(lab_options.keys()), index=1)
        with col_plot:
            fig, ax = plt.subplots(1, 2, figsize=(10, 3.5))
            sns.boxplot(x='class', y=lab_options[selected_lab1], data=df, ax=ax[0], palette="coolwarm")
            ax[0].set_title(f"{selected_lab1}", fontsize=11); ax[0].set_xticklabels(['Non-CKD', 'CKD']); ax[0].set_xlabel(""); ax[0].set_ylabel("")
            sns.boxplot(x='class', y=lab_options[selected_lab2], data=df, ax=ax[1], palette="viridis")
            ax[1].set_title(f"{selected_lab2}", fontsize=11); ax[1].set_xticklabels(['Non-CKD', 'CKD']); ax[1].set_xlabel(""); ax[1].set_ylabel("")
            plt.tight_layout(); st.pyplot(fig)

    with tab2:
        numeric_df = df.select_dtypes(include=np.number)
        correlation_matrix = numeric_df.corr()
        corr_pairs = correlation_matrix.unstack().reset_index(); corr_pairs.columns = ['Var1', 'Var2', 'Corr']
        corr_pairs = corr_pairs[corr_pairs['Var1'] != corr_pairs['Var2']]
        corr_pairs['key'] = corr_pairs.apply(lambda r: tuple(sorted((r['Var1'], r['Var2']))), axis=1)
        corr_pairs = corr_pairs.drop_duplicates(subset='key').drop(columns='key')
        corr_pairs['Abs_Corr'] = corr_pairs['Corr'].abs()
        sig_pairs = corr_pairs.sort_values(by='Abs_Corr', ascending=False).head(10)
        
        col_table, col_heatmap = st.columns([1, 2])
        with col_table:
            st.write("Top 10 Correlated Pairs:")
            st.dataframe(sig_pairs[['Var1', 'Var2', 'Corr']].style.background_gradient(cmap='coolwarm', axis=0, subset='Corr'))
        with col_heatmap:
            top_vars = pd.unique(sig_pairs[['Var1', 'Var2']].values.ravel('K'))
            top_corr_matrix = correlation_matrix.loc[top_vars, top_vars]
            mask = np.triu(np.ones_like(top_corr_matrix, dtype=bool))
            fig_corr, ax_corr = plt.subplots(figsize=(7, 5))
            sns.heatmap(top_corr_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5, mask=mask, ax=ax_corr)
            ax_corr.set_title("Heatmap of Strongest Correlations", fontsize=12)
            st.pyplot(fig_corr, use_container_width=True)
            
    with tab3:
        st.subheader("Explore the Full Cleaned Dataset")
        st.dataframe(df.drop(columns=['age_group']))
