import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# --- 1. PAGE CONFIGURATION ---
st.set_page_config(
    page_title="CKD Healthcare Dashboard",
    page_icon="ðŸ©º",
    layout="wide"
)

# --- 2. DATA LOADING AND CACHING ---
@st.cache_data
def load_data():
    """
    Loads and preprocesses the cleaned CKD dataset.
    """
    try:
        df = pd.read_csv("cleaned_kidney_disease.csv")
    except FileNotFoundError:
        st.error("Error: 'cleaned_kidney_disease.csv' not found.")
        st.info("Please ensure 'cleaned_kidney_disease.csv' is in the same directory as this script.")
        return None

    df['class'] = df['class'].map({'Chronic Kidney Disease': 1, 'Not Chronic Kidney Disease': 0})
    bins = [0, 30, 50, 70, df['age'].max() + 1]
    labels = ['<30', '30-50', '50-70', '70+']
    df['age_group'] = pd.cut(df['age'], bins=bins, labels=labels, right=False)
    
    return df

# Load the data
df = load_data()

# --- 3. MAIN DASHBOARD ---
if df is not None:
    st.title("ðŸ©º Chronic Kidney Disease (CKD) Analytics Dashboard")
    st.markdown("A high-level overview of key CKD metrics, risk factors, and clinical findings.")

    # --- 4. KPIs & HIGH-LEVEL METRICS ---
    st.header("Overall Snapshot")
    total_patients = len(df)
    ckd_patients = df['class'].sum()
    prevalence = (ckd_patients / total_patients) * 100

    col1, col2, col3 = st.columns(3)
    col1.metric("Total Patients Analyzed", f"{total_patients}")
    col2.metric("CKD Cases Identified", f"{ckd_patients}")
    col3.metric("Overall CKD Prevalence", f"{prevalence:.1f}%")
    st.divider()

    # --- 5. HORIZONTAL LAYOUT FOR CORE VISUALIZATIONS ---
    st.header("Key Healthcare Metrics at a Glance")
    colA, colB, colC = st.columns(3)

    # --- Prevalence by Age Group ---
    with colA:
        st.subheader("CKD Prevalence by Age")
        age_prev = df.groupby('age_group')['class'].mean().mul(100)
        fig, ax = plt.subplots(figsize=(6, 5))
        bars = sns.barplot(x=age_prev.index, y=age_prev.values, palette='Blues_d', ax=ax)
        ax.set_ylabel('Prevalence (%)')
        ax.set_xlabel('Age Group')
        ax.set_ylim(0, 100)
        
        # --- THIS IS THE ADDED CODE FOR LABELS ---
        for bar in bars.patches:
            ax.text(bar.get_x() + bar.get_width() / 2, bar.get_height(), f'{bar.get_height():.1f}%', 
                    ha='center', va='bottom', fontsize=10, fontweight='bold')
        
        plt.tight_layout()
        st.pyplot(fig, use_container_width=True)

    # --- Odds Ratios of Key Risk Factors ---
    with colB:
        st.subheader("Key Comorbidity Risks")
        categorical_vars = ['hypertension', 'diabetes_mellitus', 'coronary_artery_disease', 'anemia']
        or_list = []
        for var in categorical_vars:
            cont_table = pd.crosstab(df[var], df['class']) + 0.5
            a, b, c, d = cont_table.loc[1, 1], cont_table.loc[1, 0], cont_table.loc[0, 1], cont_table.loc[0, 0]
            odds_ratio = (a * d) / (b * c)
            or_list.append({'Risk Factor': var.replace('_', ' ').title(), 'Odds Ratio': odds_ratio})
        
        odds_df = pd.DataFrame(or_list).set_index('Risk Factor').sort_values(by='Odds Ratio')
        fig, ax = plt.subplots(figsize=(6, 5))
        bars = sns.barplot(x=odds_df['Odds Ratio'], y=odds_df.index, palette='OrRd', ax=ax)
        ax.set_xlabel("Odds Ratio (Log Scale)")
        ax.set_ylabel("")
        ax.axvline(1, color='black', linestyle='--')
        ax.set_xscale('log')
        # --- THIS IS THE ADDED CODE FOR LABELS ---
        for i, v in enumerate(odds_df['Odds Ratio']):
            ax.text(v, i, f' {v:.2f}', va='center', ha='left', fontweight='bold')
        plt.tight_layout()
        st.pyplot(fig, use_container_width=True)

    # --- Incidence of Abnormal Lab Findings ---
    with colC:
        st.subheader("Incidence of Abnormal Findings")
        abnormal_defs = {
            'Albumin > 0': df['albumin'] > 0,
            'Pus Cells Abn.': df['pus_cell'] == 0,
            'RBCs Abn.': df['red_blood_cells'] == 0,
            'Sugar > 0': df['sugar'] > 0
        }
        incidence_data = []
        for lab, cond in abnormal_defs.items():
            incidence_data.append([cond[df['class']==0].mean()*100, cond[df['class']==1].mean()*100])
        
        incidence_df = pd.DataFrame(incidence_data, index=abnormal_defs.keys(), columns=['Non-CKD', 'CKD'])
        fig, ax = plt.subplots(figsize=(6, 5))
        sns.heatmap(incidence_df, annot=True, fmt=".1f", cmap='coolwarm', linewidths=0.5, ax=ax, cbar=False)
        ax.set_ylabel("Abnormal Finding")
        plt.tight_layout()
        st.pyplot(fig, use_container_width=True)

    st.divider()

    # --- 6. TABS FOR DEEPER, INTERACTIVE ANALYSIS ---
    st.header("Drill-Down and Advanced Analysis")
    tab1, tab2, tab3 = st.tabs(["Interactive Clinical Explorer", "Correlation Analysis", "Data Explorer"])

    with tab1:
        st.subheader("Compare Clinical Indicators by CKD Status")
        col_select, col_plot = st.columns([1, 2])
        
        with col_select:
            lab_options = {
                "Serum Creatinine": "serum_creatinine",
                "Hemoglobin": "hemoglobin",
                "Blood Glucose": "blood_glucose_random",
                "Blood Urea": "blood_urea",
                "Sodium": "sodium",
                "Potassium": "potassium"
            }
            selected_lab1 = st.selectbox("Choose Lab Value 1:", options=list(lab_options.keys()), index=0)
            selected_lab2 = st.selectbox("Choose Lab Value 2:", options=list(lab_options.keys()), index=1)
        
        with col_plot:
            fig, ax = plt.subplots(1, 2, figsize=(10, 4))
            sns.boxplot(x='class', y=lab_options[selected_lab1], data=df, ax=ax[0], palette="coolwarm")
            ax[0].set_title(f"{selected_lab1}", fontsize=12)
            ax[0].set_xticklabels(['Non-CKD', 'CKD'])
            ax[0].set_xlabel("")
            ax[0].set_ylabel("")

            sns.boxplot(x='class', y=lab_options[selected_lab2], data=df, ax=ax[1], palette="viridis")
            ax[1].set_title(f"{selected_lab2}", fontsize=12)
            ax[1].set_xticklabels(['Non-CKD', 'CKD'])
            ax[1].set_xlabel("")
            ax[1].set_ylabel("")

            plt.tight_layout()
            st.pyplot(fig)

    with tab2:
        st.subheader("Correlations Between Top Clinical Variables")
        # --- Create and filter the correlation DataFrame ---
        numeric_df = df.select_dtypes(include=np.number)
        correlation_matrix = numeric_df.corr()
        corr_pairs = correlation_matrix.unstack().reset_index()
        corr_pairs.columns = ['Variable 1', 'Variable 2', 'Correlation']
        corr_pairs = corr_pairs[corr_pairs['Variable 1'] != corr_pairs['Variable 2']]
        corr_pairs['pair_key'] = corr_pairs.apply(lambda row: tuple(sorted((row['Variable 1'], row['Variable 2']))), axis=1)
        corr_pairs = corr_pairs.drop_duplicates(subset='pair_key').drop(columns='pair_key')
        corr_pairs['Abs_Correlation'] = corr_pairs['Correlation'].abs()
        significant_pairs = corr_pairs.sort_values(by='Abs_Correlation', ascending=False).head(10)

        # --- Display the table and focused heatmap ---
        col_table, col_heatmap = st.columns([1, 2])
        
        with col_table:
            st.write("Top 10 Correlated Pairs:")
            st.dataframe(significant_pairs[['Variable 1', 'Variable 2', 'Correlation']].style.background_gradient(cmap='coolwarm', axis=0, subset='Correlation'))

        with col_heatmap:
            # Extract variables and create the matrix for the heatmap
            top_vars = pd.unique(significant_pairs[['Variable 1', 'Variable 2']].values.ravel('K'))
            top_corr_matrix = correlation_matrix.loc[top_vars, top_vars]
            
            # Create a mask to hide the redundant upper triangle
            mask = np.triu(np.ones_like(top_corr_matrix, dtype=bool))
            
            # Plot the heatmap
            fig_corr, ax_corr = plt.subplots(figsize=(8, 6))
            sns.heatmap(top_corr_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5, 
                        mask=mask, ax=ax_corr)
            ax_corr.set_title("Heatmap of Strongest Correlations", fontsize=14)
            st.pyplot(fig_corr, use_container_width=True)
            
    with tab3:
        st.subheader("Explore the Full Cleaned Dataset")
        st.dataframe(df.drop(columns=['age_group']))
