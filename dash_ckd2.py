# -*- coding: utf-8 -*-
"""Dash ckd2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SDdHzrz_cwFpIayYRrZzIJpfsro1nUrn
"""

import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# --- 1. PAGE CONFIGURATION ---
st.set_page_config(
    page_title="CKD Healthcare Dashboard",
    page_icon="ðŸ©º",
    layout="wide"
)

# --- 2. DATA LOADING AND CACHING ---
@st.cache_data
def load_data():
    """
    Loads and preprocesses the cleaned CKD dataset.
    - Loads data from 'cleaned_kidney_disease.csv'
    - Maps the target 'class' variable to numerical format (1 for CKD, 0 for Non-CKD)
    - Creates age groups for prevalence analysis
    """
    try:
        df = pd.read_csv("cleaned_kidney_disease.csv")
    except FileNotFoundError:
        st.error("Error: 'cleaned_kidney_disease.csv' not found.")
        st.info("Please ensure you have run the Ckd_healthcare.ipynb notebook to generate the cleaned data file and that it's in the same directory as this script.")
        return None

    # Map target variable for calculations
    df['class'] = df['class'].map({'Chronic Kidney Disease': 1, 'Not Chronic Kidney Disease': 0})

    # Create age groups for prevalence analysis
    bins = [0, 30, 50, 70, df['age'].max() + 1]
    labels = ['<30', '30-50', '50-70', '70+']
    df['age_group'] = pd.cut(df['age'], bins=bins, labels=labels, right=False)

    return df

# Load the data
df = load_data()

# --- 3. MAIN DASHBOARD ---
if df is not None:
    st.title("ðŸ©º Chronic Kidney Disease (CKD) Analytics Dashboard")
    st.markdown("An interactive dashboard to explore clinical data, risk factors, and prevalence related to CKD.")

    # --- 4. KPIs & HIGH-LEVEL METRICS ---
    st.divider()
    st.header("Overall Snapshot")

    total_patients = len(df)
    ckd_patients = df['class'].sum()
    prevalence = (ckd_patients / total_patients) * 100

    col1, col2, col3 = st.columns(3)
    col1.metric("Total Patients Analyzed", f"{total_patients}")
    col2.metric("CKD Cases Identified", f"{ckd_patients}")
    col3.metric("Overall CKD Prevalence", f"{prevalence:.1f}%")
    st.divider()

    # --- 5. PREVALENCE & RISK FACTOR ANALYSIS ---
    st.header("Prevalence and Risk Factor Insights")
    col1, col2 = st.columns(2)

    # --- Prevalence by Age Group ---
    with col1:
        st.subheader("CKD Prevalence by Age Group")
        age_prev = df.groupby('age_group')['class'].mean().mul(100).rename('Prevalence (%)')

        fig, ax = plt.subplots()
        sns.barplot(x=age_prev.index, y=age_prev.values, palette='Blues_d', ax=ax)
        ax.set_title('CKD Prevalence by Age Group')
        ax.set_ylabel('Prevalence (%)')
        ax.set_xlabel('Age Group')
        ax.set_ylim(0, 100)
        # Add data labels
        for i, v in enumerate(age_prev):
            ax.text(i, v + 2, f"{v:.1f}%", ha='center', fontweight='bold')
        st.pyplot(fig)

    # --- Odds Ratios of Key Risk Factors ---
    with col2:
        st.subheader("Odds Ratios of Key Comorbidities")
        categorical_vars = ['hypertension', 'diabetes_mellitus', 'coronary_artery_disease', 'anemia']
        or_list = []
        for var in categorical_vars:
            cont_table = pd.crosstab(df[var], df['class']) + 0.5  # Haldane-Anscombe correction
            a, b, c, d = cont_table.loc[1, 1], cont_table.loc[1, 0], cont_table.loc[0, 1], cont_table.loc[0, 0]
            odds_ratio = (a * d) / (b * c)
            or_list.append({'Risk Factor': var.replace('_', ' ').title(), 'Odds Ratio': odds_ratio})

        odds_df = pd.DataFrame(or_list).set_index('Risk Factor').sort_values(by='Odds Ratio')

        fig, ax = plt.subplots()
        sns.barplot(x=odds_df['Odds Ratio'], y=odds_df.index, palette='OrRd', ax=ax)
        ax.set_title('Odds Ratios for CKD Risk Factors')
        ax.set_xlabel("Odds Ratio (Log Scale) - Likelihood of CKD")
        ax.set_ylabel("Risk Factor")
        ax.axvline(1, color='black', linestyle='--')
        ax.set_xscale('log') # Use log scale for better visualization
        st.pyplot(fig)
        st.caption("An Odds Ratio > 1 indicates an increased likelihood of CKD if the risk factor is present.")

    st.divider()

    # --- 6. INTERACTIVE CLINICAL INDICATOR ANALYSIS ---
    st.header("Interactive Clinical Indicator Explorer")
    col1, col2 = st.columns([1, 2])

    # --- User Selection for Plots ---
    with col1:
        st.subheader("Select Indicators to Compare")

        # Clinical lab values
        lab_options = {
            "Serum Creatinine": "serum_creatinine",
            "Hemoglobin": "hemoglobin",
            "Blood Glucose": "blood_glucose_random",
            "Blood Urea": "blood_urea",
            "Sodium": "sodium",
            "Potassium": "potassium"
        }
        selected_lab = st.selectbox("Choose a Lab Value:", options=list(lab_options.keys()))

        # Abnormal findings (urinalysis)
        abnormal_options = {
            "Albumin in Urine": "albumin",
            "Sugar in Urine": "sugar",
            "Red Blood Cells": "red_blood_cells",
            "Pus Cells": "pus_cell"
        }
        selected_finding = st.selectbox("Choose a Urinalysis Finding:", options=list(abnormal_options.keys()))

    # --- Dynamic Plots based on Selection ---
    with col2:
        # Box Plot for selected lab value
        fig, ax = plt.subplots(1, 2, figsize=(12, 5))
        sns.boxplot(x='class', y=lab_options[selected_lab], data=df, ax=ax[0], palette="coolwarm")
        ax[0].set_title(f"{selected_lab} by CKD Status", fontsize=14)
        ax[0].set_xticklabels(['Non-CKD', 'CKD'])
        ax[0].set_xlabel("")

        # Incidence plot for selected finding
        finding_key = abnormal_options[selected_finding]
        if finding_key in ['red_blood_cells', 'pus_cell']: # These are binary (0=abnormal, 1=normal)
            cond = df[finding_key] == 0
        else: # These are counts (abnormal if > 0)
            cond = df[finding_key] > 0

        incidence_data = [
            cond[df['class']==0].mean() * 100,
            cond[df['class']==1].mean() * 100
        ]

        sns.barplot(x=['Non-CKD', 'CKD'], y=incidence_data, palette='viridis', ax=ax[1])
        ax[1].set_title(f"Incidence of Abnormal {selected_finding}", fontsize=14)
        ax[1].set_ylabel("Incidence (%)")
        ax[1].set_ylim(0, 100)
        for i, v in enumerate(incidence_data):
            ax[1].text(i, v + 2, f"{v:.1f}%", ha='center', fontweight='bold')

        plt.tight_layout()
        st.pyplot(fig)

    # --- 7. CORRELATION ANALYSIS & DATA EXPLORER ---
    st.divider()
    st.header("Advanced Analytics")

    tab1, tab2 = st.tabs(["Correlation Analysis", "Data Explorer"])

    with tab1:
        st.subheader("Correlations Between Top Clinical Variables")
        numeric_df = df.select_dtypes(include=np.number)
        correlation_matrix = numeric_df.corr()

        # Filter for top correlated pairs
        corr_pairs = correlation_matrix.unstack().reset_index()
        corr_pairs.columns = ['Variable 1', 'Variable 2', 'Correlation']
        corr_pairs = corr_pairs[corr_pairs['Variable 1'] != corr_pairs['Variable 2']]
        corr_pairs['pair_key'] = corr_pairs.apply(lambda row: tuple(sorted((row['Variable 1'], row['Variable 2']))), axis=1)
        corr_pairs = corr_pairs.drop_duplicates(subset='pair_key').drop(columns='pair_key')
        corr_pairs['Abs_Correlation'] = corr_pairs['Correlation'].abs()
        significant_pairs = corr_pairs.sort_values(by='Abs_Correlation', ascending=False).head(10)

        col_table, col_heatmap = st.columns([1, 2])

        with col_table:
            st.write("Top 10 Correlated Pairs:")
            st.dataframe(significant_pairs[['Variable 1', 'Variable 2', 'Correlation']].style.background_gradient(cmap='coolwarm', axis=0, subset='Correlation'))

        with col_heatmap:
            top_vars = pd.unique(significant_pairs[['Variable 1', 'Variable 2']].values.ravel('K'))
            top_corr_matrix = correlation_matrix.loc[top_vars, top_vars]

            fig, ax = plt.subplots(figsize=(8, 6))
            sns.heatmap(top_corr_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5, square=True, ax=ax)
            ax.set_title("Heatmap of Strongest Correlated Variables", fontsize=16)
            st.pyplot(fig)

    with tab2:
        st.subheader("Explore the Cleaned Dataset")
        st.dataframe(df.drop(columns=['age_group']))
